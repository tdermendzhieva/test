apply from: "artifactory.gradle"

buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        //jfrog artifactory repo
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //jfrog dependency
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.0')
    }
}

//jfrog artifactory plugin
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

group = 'com.allie.data'
version = '1.0'
archivesBaseName = 'allie-data'


if (System.env.APP_VERSION) {

    version = "${System.env.APP_VERSION}"
    if(System.env.DEPLOYMENT_ENVIRONMENT == "DEV"){
        version = version + "-SNAPSHOT"
    }
}
jar {
    baseName = archivesBaseName
    version = version
    manifest {
        attributes 'Main-Class': 'com.allie.data.MongoConnectionWSConfiguration'
    }
}
sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    jcenter()
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

springBoot {
    executable = true
}

artifactory {
    contextUrl = 'http://ec2-52-88-59-224.us-west-2.compute.amazonaws.com:8081/artifactory'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        if(project.version.endsWith('-SNAPSHOT')) {
            repository {
                repoKey = 'libs-snapshot-local'
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_PASSWORD
            }

        } else {
            repository {
                repoKey = 'libs-release-local'
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_PASSWORD
            }
        }
        defaults {
            publications 'main'
        }
    }

}

compileJava.dependsOn(processResources)

task zipAWSArchive(type: Zip) {
    def artifactName = archivesBaseName + "-${version}"
    def zip = artifactName + ".zip"
    def buildPath = 'build/libs/' + artifactName + ".jar";
    from('ci/') {
        include '*'
        include '*/*' //to include contents of a folder
    }
    from (buildPath) {
        include '*'
        into ('source')
    }
    archiveName zip
    destinationDir(file('dir/'))
}

task s3Upload(type: Exec, dependsOn: zipAWSArchive){
    //define location of s3 upload script
    def s3Upload="automation/s3upload.sh"
    //defined name of file to be uploaded
    def artifactName = archivesBaseName + "-${version}"
    //define path of project where artifact is located
    def localDist = "dir/${artifactName}";

    // Moves the distribution file to the right S3 bucket
    executable "bash"
    args "-c", "sh ${s3Upload} ${localDist}"
}

// Deploys a given revision to the test environment
task deployToAWS(type:Exec) {
    // Defines the path into the project of the deploy.sh script
    def deploy = "automation/deploy.sh"
    // Defines the distribution name based on the jar section
    def artifactName = archivesBaseName + "-${version}"
    // Deploys the given distribution to the test deployment group
    executable "bash"
    args "-c", "sh ${deploy} ${System.env.DEPLOYMENT_ENVIRONMENT} ${artifactName}"
}

dependencies {
    compile(group: 'joda-time', name: 'joda-time', version: '2.8.1')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    // compile('org.springframework.boot:spring-boot-starter-data-neo4j')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile ('io.springfox:springfox-swagger2:2.4.0')
    compile ('io.springfox:springfox-swagger-ui:2.4.0')
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.2.4.Final'
    testCompile("org.springframework.boot:spring-boot-starter-test")


}



